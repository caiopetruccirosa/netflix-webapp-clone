{"version":3,"sources":["components/Header/index.js","components/MovieRow/index.js","components/MovieLists/index.js","components/FeaturedMovie/index.js","services/Tmdb/index.js","App.js","index.js"],"names":["Header","useState","background","setBackground","useEffect","scrollListener","window","scrollY","addEventListener","removeEventListener","className","href","src","alt","MovieRow","title","movies","ROW_WIDTH","results","length","SKIP_WIDTH","Math","round","innerWidth","scroll","setScroll","onClick","s","NavigateBefore","style","fontSize","NavigateNext","marginLeft","width","map","movie","key","poster_path","original_title","MovieLists","lists","item","FeaturedMovie","firstAirDate","Date","first_air_date","genres","i","push","name","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","overview","id","join","API_KEY","process","LANGUAGE","GENRE_CODE","ENDPOINTS","fetchFromTmdb","path","a","url","includes","fetch","res","json","body","Tmdb","fetchHomeData","slug","fetchMovieData","type","App","homeData","setHomeData","featuredMovie","setFeaturedMovie","fetchAndLoad","data","filter","originals","idx","floor","random","featured","featuredData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29b3bec2.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport './Header.css'\n\nconst Header = () => {\n    const [background, setBackground] = useState(false)\n\n    useEffect(() => {\n        const scrollListener = () => {\n            if (window.scrollY > 15) {\n                setBackground(true)\n            } else {\n                setBackground(false)\n            }\n        }\n\n        window.addEventListener('scroll', scrollListener)\n\n        return () => {\n            window.removeEventListener('scroll', scrollListener)\n        }\n    })\n\n    return (\n        <header className={background ? 'background' : ''}>\n            <div className=\"header--logo\">\n                <a href=\"/\">\n                    <img \n                        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n                        alt=\"Netflix\"\n                    />\n                </a>\n            </div>\n\n            <div className=\"header--user\">\n                <a href=\"/\">\n                    <img \n                        src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/1bdc9a33850498.56ba69ac2ba5b.png\" \n                        alt=\"UsuÃ¡rio\"\n                    />\n                </a>\n            </div>\n        </header>\n    )\n}\n\nexport default Header","import { NavigateBefore, NavigateNext } from '@material-ui/icons'\nimport { useState } from 'react'\n\nimport './MovieRow.css'\n\nconst TMDB_IMAGE_BASE_URL = 'https://image.tmdb.org/t/p'\nconst TMDB_IMAGE_SIZE = '/w500'\n\nconst MovieRow = ({title, movies}) => {\n    const MOVIE_WIDTH = 150\n    const ROW_WIDTH = (movies.results.length * MOVIE_WIDTH) + 80\n    const SKIP_WIDTH = Math.round(window.innerWidth / 2)\n\n    const [scroll, setScroll] = useState(0)\n\n    const handlePrevious = () => {\n        let s = scroll + SKIP_WIDTH\n        if (s > 0) {\n            s = 0\n        }\n\n        setScroll(s)\n    }\n\n    const handleNext = () => {\n        let s = scroll - SKIP_WIDTH\n        if (s < (window.innerWidth - ROW_WIDTH)) {\n            s = window.innerWidth - ROW_WIDTH\n        }\n        \n        setScroll(s)\n    }\n\n    return (\n        <div className=\"movierow\">\n            <h2>{title}</h2>\n\n            <div className=\"movierow--previous\" onClick={handlePrevious}>\n                <NavigateBefore style={{fontSize: 50}}/>\n            </div>\n\n            <div className=\"movierow--next\" onClick={handleNext}>\n                <NavigateNext style={{fontSize: 50}}/>\n            </div>\n\n            <div className=\"movierow--listarea\">\n                <div className=\"movierow--list\" style={{\n                    marginLeft: scroll, \n                    width: ROW_WIDTH\n                }}>\n                    {movies.results.map((movie, key) => (\n                        <div className=\"movierow--item\" key={key}>\n                            <img \n                                src={`${TMDB_IMAGE_BASE_URL}${TMDB_IMAGE_SIZE}${movie.poster_path}`} \n                                alt={movie.original_title}\n                            />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MovieRow","import MovieRow from \"../MovieRow\"\n\nimport './MovieLists.css'\n\nconst MovieLists = ({lists}) => {\n    return (\n        <section className=\"lists\">\n          {lists.map((item, key) => (\n            <MovieRow key={key} title={item.title} movies={item.movies} />\n          ))}\n        </section>\n    )\n}\n\nexport default MovieLists","import './FeaturedMovie.css'\n\nconst TMDB_IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/original'\n\nconst FeaturedMovie = ({movie}) => {\n    const firstAirDate = new Date(movie.first_air_date)\n    \n    const genres = []\n    for (let i in movie.genres) {\n        genres.push(movie.genres[i].name)\n    }\n\n    return (\n        <section className=\"featured\" style={{\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundImage: `url(${TMDB_IMAGE_BASE_URL}${movie.backdrop_path})`\n        }}>\n            <div className=\"featured--vertical\">\n                <div className=\"featured--horizontal\">\n                    <div className=\"featured--name\">\n                        {movie.original_name}\n                    </div>\n\n                    <div className=\"featured--info\">\n                        <div className=\"featured--points\">\n                            {movie.vote_average}\n                        </div>\n\n                        <div className=\"featured--year\">\n                            {firstAirDate.getFullYear()}\n                        </div>\n\n                        <div className=\"featured--seasons\">\n                            {movie.number_of_seasons} temporada{movie.number_of_seasons > 1 ? 's' : ''}\n                        </div>\n                    </div>\n\n                    <div className=\"featured--description\">\n                        {movie.overview}\n                    </div>\n\n                    <div className=\"featured--buttons\">\n                        <a href={`/watch/${movie.id}`} className=\"featured--watchbutton\">â¶ Assistir</a>\n                        <a href={`/list/add/${movie.id}`} className=\"featured--listbutton\">+ Minha Lista</a>\n                    </div>\n\n                    <div className=\"featured--genres\">\n                        <strong>GÃªneros: </strong>{genres.join(', ')}\n                    </div>\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default FeaturedMovie","const API_BASE_URL = 'https://api.themoviedb.org/3'\nconst API_KEY = process.env.REACT_APP_TMDB_API_KEY\n\nconst LANGUAGE = 'pt-BR'\nconst NETFLIX_NETWORK = 213\n\nconst GENRE_CODE = {\n    ACTION_GENRE: 28,\n    COMEDY_GENRE: 35,\n    HORROR_GENRE: 27,\n    ROMANCE_GENRE: 10749,\n    DOCUMENTARY_GENRE: 99,\n}\n\nconst ENDPOINTS = {\n    DISCOVER_MOVIE: '/discover/movie',\n    DISCOVER_TV: '/discover/tv',\n    TRENDING: '/trending/all/week',\n    TOP_RATED: '/movie/top_rated',\n    MOVIE: '/movie',\n    TV: '/tv',\n}\n\nconst fetchFromTmdb = async (path) => {\n    let url = `${API_BASE_URL}${path}`\n\n    if (url.includes('?')) {\n        url += `&api_key=${API_KEY}`\n    } else {\n        url += `?api_key=${API_KEY}`\n    }\n\n    const res = await fetch(url)\n    const body = await res.json()\n\n    return body\n}\n\nconst Tmdb = {\n    fetchHomeData: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Originais do Netflix',\n                movies: await fetchFromTmdb(`${ENDPOINTS.DISCOVER_TV}?with_network=${NETFLIX_NETWORK}&language=${LANGUAGE}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Recomendados para VocÃª',\n                movies: await fetchFromTmdb(`${ENDPOINTS.TRENDING}?with_network=${NETFLIX_NETWORK}&language=${LANGUAGE}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'Em Alta',\n                movies: await fetchFromTmdb(`${ENDPOINTS.TOP_RATED}?with_network=${NETFLIX_NETWORK}&language=${LANGUAGE}`)\n            },\n            {\n                slug: 'action',\n                title: 'AÃ§Ã£o',\n                movies: await fetchFromTmdb(`${ENDPOINTS.DISCOVER_MOVIE}?with_genres=${GENRE_CODE.ACTION_GENRE}&language=${LANGUAGE}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'ComÃ©dia',\n                movies: await fetchFromTmdb(`${ENDPOINTS.DISCOVER_MOVIE}?with_genres=${GENRE_CODE.COMEDY_GENRE}&language=${LANGUAGE}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror/Suspense',\n                movies: await fetchFromTmdb(`${ENDPOINTS.DISCOVER_MOVIE}?with_genres=${GENRE_CODE.HORROR_GENRE}&language=${LANGUAGE}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                movies: await fetchFromTmdb(`${ENDPOINTS.DISCOVER_MOVIE}?with_genres=${GENRE_CODE.ROMANCE_GENRE}&language=${LANGUAGE}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'DocumentÃ¡rios',\n                movies: await fetchFromTmdb(`${ENDPOINTS.DISCOVER_MOVIE}?with_genres=${GENRE_CODE.DOCUMENTARY_GENRE}&language=${LANGUAGE}`)\n            },\n        ]\n    },\n    fetchMovieData: async (id, type) => {\n        let path = ''\n        if (type === 'movie') {\n            path = `${ENDPOINTS.MOVIE}/${id}`\n        } else if (type === 'tv') {\n            path = `${ENDPOINTS.TV}/${id}`\n        }\n\n        return await fetchFromTmdb(`${path}?language=${LANGUAGE}`)\n    }\n}\n\nexport default Tmdb","import { useEffect, useState } from \"react\";\n\nimport Header from \"./components/Header\";\nimport MovieLists from \"./components/MovieLists\"\nimport FeaturedMovie from \"./components/FeaturedMovie\";\n\nimport Tmdb from \"./services/Tmdb\";\n\nimport './App.css'\n\nconst App = () => {\n  const [homeData, setHomeData] = useState()\n  const [featuredMovie, setFeaturedMovie] = useState()\n\n  useEffect(() => {\n    const fetchAndLoad = async () => {\n      const data = await Tmdb.fetchHomeData()\n      setHomeData(data)\n\n      const [originals] = data.filter(i => i.slug === 'originals')\n      const idx = Math.floor(Math.random() * originals.movies.results.length)\n      const featured = originals.movies.results[idx]\n      const featuredData = await Tmdb.fetchMovieData(featured.id, 'tv')\n\n      setFeaturedMovie(featuredData)\n    }\n\n    fetchAndLoad()\n  }, [])\n\n  return (\n    <div className=\"page\">\n      <Header />\n\n      {featuredMovie &&\n        <FeaturedMovie movie={featuredMovie}/>\n      }\n\n      {homeData &&\n        <MovieLists lists={homeData} />\n      }\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}