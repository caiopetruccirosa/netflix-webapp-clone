{"version":3,"sources":["components/Header/Header.js","components/MovieRow/MovieRow.js","components/FeaturedMovie/FeaturedMovie.js","services/Tmdb/Tmdb.js","App.js","index.js"],"names":["Header","MovieRow","title","movies","className","results","map","movie","key","src","poster_path","alt","original_title","FeaturedMovie","firstAirDate","Date","first_air_date","genres","i","push","name","style","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","overview","join","API_KEY","process","LANGUAGE","GENRE_CODE","ENDPOINTS","fetchFromTmdb","path","a","url","includes","fetch","res","json","body","Tmdb","fetchHomeData","slug","fetchMovieData","id","type","App","useState","homeData","setHomeData","featuredMovie","setFeaturedMovie","useEffect","fetchAndLoad","data","filter","originals","idx","Math","floor","random","length","featured","featuredData","item","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f23b689.chunk.js","sourcesContent":["const Header = () => {\n    return (\n        <h1>Hello world!</h1>\n    )\n}\n\nexport default Header","import './MovieRow.css'\n\nconst TMDB_IMAGE_BASE_URL = 'https://image.tmdb.org/t/p'\nconst TMDB_IMAGE_SIZE = '/w500'\n\nconst MovieRow = ({title, movies}) => {\n    return (\n        <div className=\"movierow\">\n            <h2>{title}</h2>\n            <div className=\"movierow--listarea\">\n                <div className=\"movierow--list\">\n                    {movies.results.map((movie, key) => (\n                        <div className=\"movierow--item\" key={key}>\n                            <img \n                                src={`${TMDB_IMAGE_BASE_URL}${TMDB_IMAGE_SIZE}${movie.poster_path}`} \n                                alt={movie.original_title}\n                            />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MovieRow","import './FeaturedMovie.css'\n\nconst TMDB_IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/original'\n\nconst FeaturedMovie = ({movie}) => {\n    const firstAirDate = new Date(movie.first_air_date)\n    \n    const genres = []\n    for (let i in movie.genres) {\n        genres.push(movie.genres[i].name)\n    }\n\n    return (\n        <section className=\"featured\" style={{\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundImage: `url(${TMDB_IMAGE_BASE_URL}${movie.backdrop_path})`\n        }}>\n            <div className=\"featured--vertical\">\n                <div className=\"featured--horizontal\">\n                    <div className=\"featured--name\">\n                        {movie.original_name}\n                    </div>\n\n                    <div className=\"featured--info\">\n                        <div className=\"featured--points\">\n                            {movie.vote_average}\n                        </div>\n\n                        <div className=\"featured--year\">\n                            {firstAirDate.getFullYear()}\n                        </div>\n\n                        <div className=\"featured--seasons\">\n                            {movie.number_of_seasons} temporadas\n                        </div>\n                    </div>\n\n                    <div className=\"featured--description\">\n                        {movie.overview}\n                    </div>\n                    <div className=\"featured--buttons\">\n\n                    </div>\n                    <div className=\"featured--genres\">\n                        <strong>Gêneros: </strong>{genres.join(', ')}\n                    </div>\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default FeaturedMovie","const API_BASE_URL = 'https://api.themoviedb.org/3'\nconst API_KEY = process.env.REACT_APP_TMDB_API_KEY\n\nconst LANGUAGE = 'pt-BR'\nconst NETFLIX_NETWORK = 213\n\nconst GENRE_CODE = {\n    ACTION_GENRE: 28,\n    COMEDY_GENRE: 35,\n    HORROR_GENRE: 27,\n    ROMANCE_GENRE: 10749,\n    DOCUMENTARY_GENRE: 99,\n}\n\nconst ENDPOINTS = {\n    DISCOVER_MOVIE: '/discover/movie',\n    DISCOVER_TV: '/discover/tv',\n    TRENDING: '/trending/all/week',\n    TOP_RATED: '/movie/top_rated',\n    MOVIE: '/movie',\n    TV: '/tv',\n}\n\nconst fetchFromTmdb = async (path) => {\n    let url = `${API_BASE_URL}${path}`\n\n    if (url.includes('?')) {\n        url += `&api_key=${API_KEY}`\n    } else {\n        url += `?api_key=${API_KEY}`\n    }\n\n    const res = await fetch(url)\n    const body = await res.json()\n\n    return body\n}\n\nconst Tmdb = {\n    fetchHomeData: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Originais do Netflix',\n                movies: await fetchFromTmdb(`${ENDPOINTS.DISCOVER_TV}?with_network=${NETFLIX_NETWORK}&language=${LANGUAGE}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Recomendados para Você',\n                movies: await fetchFromTmdb(`${ENDPOINTS.TRENDING}?with_network=${NETFLIX_NETWORK}&language=${LANGUAGE}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'Em Alta',\n                movies: await fetchFromTmdb(`${ENDPOINTS.TOP_RATED}?with_network=${NETFLIX_NETWORK}&language=${LANGUAGE}`)\n            },\n            {\n                slug: 'action',\n                title: 'Ação',\n                movies: await fetchFromTmdb(`${ENDPOINTS.DISCOVER_MOVIE}?with_genres=${GENRE_CODE.ACTION_GENRE}&language=${LANGUAGE}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comédia',\n                movies: await fetchFromTmdb(`${ENDPOINTS.DISCOVER_MOVIE}?with_genres=${GENRE_CODE.COMEDY_GENRE}&language=${LANGUAGE}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror/Suspense',\n                movies: await fetchFromTmdb(`${ENDPOINTS.DISCOVER_MOVIE}?with_genres=${GENRE_CODE.HORROR_GENRE}&language=${LANGUAGE}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                movies: await fetchFromTmdb(`${ENDPOINTS.DISCOVER_MOVIE}?with_genres=${GENRE_CODE.ROMANCE_GENRE}&language=${LANGUAGE}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentários',\n                movies: await fetchFromTmdb(`${ENDPOINTS.DISCOVER_MOVIE}?with_genres=${GENRE_CODE.DOCUMENTARY_GENRE}&language=${LANGUAGE}`)\n            },\n        ]\n    },\n    fetchMovieData: async (id, type) => {\n        let path = ''\n        if (type === 'movie') {\n            path = `${ENDPOINTS.MOVIE}/${id}`\n        } else if (type === 'tv') {\n            path = `${ENDPOINTS.TV}/${id}`\n        }\n\n        return await fetchFromTmdb(`${path}?language=${LANGUAGE}`)\n    }\n}\n\nexport default Tmdb","import { useEffect, useState } from \"react\";\n\nimport Header from \"./components/Header/Header\";\nimport MovieRow from \"./components/MovieRow/MovieRow\";\nimport FeaturedMovie from \"./components/FeaturedMovie/FeaturedMovie\";\n\nimport Tmdb from \"./services/Tmdb/Tmdb\";\n\nimport './App.css'\n\nconst App = () => {\n  const [homeData, setHomeData] = useState([])\n  const [featuredMovie, setFeaturedMovie] = useState([])\n\n  useEffect(() => {\n    const fetchAndLoad = async () => {\n      const data = await Tmdb.fetchHomeData()\n      setHomeData(data)\n\n      const [originals] = data.filter(i => i.slug === 'originals')\n      const idx = Math.floor(Math.random() * originals.movies.results.length)\n      const featured = originals.movies.results[idx]\n      const featuredData = await Tmdb.fetchMovieData(featured.id, 'tv')\n\n      setFeaturedMovie(featuredData)\n    }\n\n    fetchAndLoad()\n  }, [])\n\n  return (\n    <div className=\"page\">\n      <Header />\n\n      {featuredMovie &&\n        <FeaturedMovie movie={featuredMovie}/>\n      }\n\n      {homeData && homeData.length > 0 &&\n        <section className=\"lists\">\n          {homeData.map((item, key) => (\n            <MovieRow key={key} title={item.title} movies={item.movies} />\n          ))}\n        </section>\n      }\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}